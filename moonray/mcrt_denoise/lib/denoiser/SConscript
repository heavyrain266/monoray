Import('env')
from os import path

modName = path.basename(path.abspath('..'))
libName = path.basename(path.abspath('.'))
# --------------------------------------------------------------------------
name       = libName
sources    = [
              'Denoiser.cc',
              'OIDNDenoiserImpl.cc',
              'OptixDenoiserImpl.cc',
             ]

# assemble public headers
publicHeaders = [
    'Denoiser.h',
]

buildTarget = GetOption('target-architecture')
if not buildTarget:
    buildTarget = "SSE"

# SSE 4.1
if 'SSE' in buildTarget:

    sources   += [
                 ]
elif 'AVX2' in buildTarget:
    env['CXXFLAGS'].append('-D__TARGET_AVX2__')
    env['CXXFLAGS'].append('-D__AVX2__')
    sources   += [
                 ]
elif 'AVX' in buildTarget:
    env['CXXFLAGS'].append('-D__TARGET_AVX__')
    env['CXXFLAGS'].append('-D__AVX__')
    sources   += [
                 ]

# We only support building with CUDA in Scons
env['CXXFLAGS'].append('-DMOONRAY_USE_CUDA')

incdir     = [str(env.Dir('../..').srcnode())]
components = [
              'cuda',
              'OpenImageDenoise',
              'optix',
              'scene_rdl2',
]

# --------------------------------------------------------------------------

if env['TYPE_LABEL'] == 'debug':
    env['CXXFLAGS'].append('-DTSLOG_LEVEL=TSLOG_MSG_DEBUG')
    env['CXXFLAGS'].append('-DTSLOG_SHOW_PID')
    env['CXXFLAGS'].append('-DTSLOG_SHOW_TID')
    env['CXXFLAGS'].append('-DTSLOG_SHOW_TIME')
env['CXXFLAGS'].append('-DTSLOG_SHOW_FILE')

# ICC Specific Compiler Flags
if 'icc' in env['CC']:
    env['CXXFLAGS'].append('-wd177')
    env['CXXFLAGS'].append('-wd444')
    env['CXXFLAGS'].append('-wd1684')
    env['CXXFLAGS'].append('-wd2203') # warning: cast discards qualifiers from target type
    env['CXXFLAGS'].append('-wd2960') # The allocated memory may not satisfy the type's requirements (64 bytes)
    #env['CXXFLAGS'].append('-wd1424') #
    env['CXXFLAGS'].append('-wd1711') # assignment to statically allocated variable

# --------------------------------------------------------------------------

env.DWAUseComponents(components)
lib = env.DWASharedLibrary(name, sources)
env.DWAInstallInclude(publicHeaders, 'mcrt_denoise/denoiser')
target = env.DWAInstallLib(lib)
env.DWAComponent(name, LIBS=target, CPPPATH=incdir, COMPONENTS=components)
env.DWAInstallSConscriptStub(name, LIBS=target,
                             CPPPATH=[env.Dir('$INSTALL_DIR/include')],
                             COMPONENTS=components)
env.DWALinkValidate(name)
