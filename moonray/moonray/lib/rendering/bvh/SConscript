Import('env')
from os import path

modName = path.basename(path.abspath('..'))
libName = path.basename(path.abspath('.'))
# --------------------------------------------------------------------------
name       = modName+'_'+libName+'_shading'
sources    = env.DWAGlob('*.cc')
sources   += env.DWAGlobRecursive('*.cc', "shading")
components = [
                'common_mcrt_util',
                'rendering_mcrt_common',
                'bvh_shading_ispc',
                'tbb'
             ]
env.DWAUseComponents(components)

public_headers = [
    'shading/Log.h',
    'shading/AttributeKey.h',
    'shading/AttributeTable.h',
    'shading/PrimitiveAttribute.h',
    'shading/Attributes.h',
    'shading/Xform.h',
    'shading/State.h',
    'shading/ShadingTLState.hh'
]
# --------------------------------------------------------------------------
env.DWAInstallInclude(public_headers, 'moonray/rendering/bvh/shading')

# for this option to take affect, it must be added *before* we add the ispc sources.
env.AppendUnique(ISPCFLAGS = ['--opt=force-aligned-memory'],
                 CPPPATH = [env.Dir('.'),
                            env.Dir('$BUILD_DIR/lib')])

env.AppendUnique(CPPPATH = [
        env.Dir('.'),
        env.Dir('#/lib')])

lib = env.DWASharedLibrary(name, sources)
target = env.DWAInstallLib(lib)
incdir = [
    str(env.Dir('../../..').srcnode()),
    env.Dir('.'),
    env.Dir('./shading'),
    env.Dir('./shading/ispc')
]
env.DWAComponent(name, LIBS=target, CPPPATH=incdir, COMPONENTS=components)
env.DWAInstallSConscriptStub(name, LIBS=target,
                             CPPPATH=[env.Dir('$INSTALL_DIR/include')],
                             COMPONENTS=components)
env.DWALinkValidate(name)
env.AppendUnique(CXXFLAGS=['-std=c++17'])
