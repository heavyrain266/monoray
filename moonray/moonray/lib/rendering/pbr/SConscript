Import ('env')

env.Tool('lex')
env.Tool('yacc')

from os import path, environ
import datetime

def objcopy(source, output):
    target = env.Command(output, source,
                         "objcopy --input-target=binary --binary-architecture=i386 " +
                         "--output-target=elf64-x86-64 $SOURCE $TARGET")
    env.NoCache(target)

stl_version = int(environ.get('REZ_GCC_MAJOR_VERSION', '4'))
env.AppendUnique(CPPDEFINES=[('STL_VERSION', stl_version)])

env.AppendUnique(ISPCFLAGS = ['--wno-perf'])

parentDirName = path.basename(path.abspath('..'))
currDirName = path.basename(path.abspath('.'))


# ------------------------------------------------------------------------------
# Setup

# extract library name from the path
libName = parentDirName + '_' + currDirName

components = [
    'common_except',
    'common_mcrt_macros',
    'common_platform',
    'deepfile',
    'embree',
    'oiio',
    'random123',
    'render_util',
    'rendering_geom',
    'rendering_lpe',
    'rendering_mcrt_common',
    'rendering_rt',
    'rendering_shading',
    'scene_rdl2',
    'shading_eval_ispc',
    'tbb',
    'texturing_sampler'
]
env.DWAUseComponents(components)

# for this option to take affect, it must be added *before* we add the ispc sources.
env.AppendUnique(ISPCFLAGS = ['--opt=force-aligned-memory'])

# ISPC source files.
sourceFiles, headers = env.IspcShared([
    'sampler/Sampling.ispc',
    'core/Aov.ispc',
    'core/Distribution.ispc',
    'core/ImageColorCorrect.ispc',
    'core/PbrTLState.ispc',
    'core/RayState.ispc',
    'core/Statistics.ispc',
    'core/Util.ispc',
    'integrator/BsdfOneSampler.ispc',
    'integrator/BsdfSampler.ispc',
    'integrator/LightSetSampler.ispc',
    'integrator/PathIntegratorBundled.ispc',
    'integrator/PathIntegratorMultiSampler.ispc',
    'integrator/PathIntegratorUtil.ispc',
    'light/CylinderLight.ispc',
    'light/DiskLight.ispc',
    'light/DistantLight.ispc',
    'light/EnvLight.ispc',
    'light/Light.ispc',
    'light/LightAccelerator.ispc',
    'light/LightSet.ispc',
    'light/LightTree.ispc',
    'light/LightUtil.ispc',
    'light/MeshLight.ispc',
    'light/RectLight.ispc',
    'light/SphereLight.ispc',
    'light/SpotLight.ispc',
    'lightfilter/BarnDoorLightFilter.ispc',
    'lightfilter/ColorRampLightFilter.ispc',
    'lightfilter/CombineLightFilter.ispc',
    'lightfilter/CookieLightFilter.ispc',
    'lightfilter/CookieLightFilter_v2.ispc',
    'lightfilter/DecayLightFilter.ispc',
    'lightfilter/EllipticalFalloff.ispc',
    'lightfilter/IntensityLightFilter.ispc',
    'lightfilter/LightFilterList.ispc',
    'lightfilter/RodLightFilter.ispc',
    'lightfilter/VdbLightFilter.ispc',
    'Types.ispc',
])

# print("\n\n\nheaders = %s\n\n" % '\n\t'.join(map(lambda h: h.abspath, headers)))

# Yacc output
# BUG: If YACCHXXFILESUFFIX is set to '.h' (which we would prefer),
# then yaccOutput[1] = 'core/AovMatParser.h' (which is correct).
# But unfortunately, bison creates core/AovMatParser.hh.  So
# we relent and set the YACCHXXFILESUFFIX = '.hh' so scons and bison
# are in agreement and scons can track the dependencies properly.
yaccOutput = env.CXXFile(target = 'core/AovMatParser.cc',
                         source = 'core/AovMat.yy',
                         YACCFLAGS = '-d -p aovMat_yy',
                         YACCHXXFILESUFFIX = '.hh')

# Lex output
lexOutput = env.CXXFile(target = 'core/AovMatLexer.cc',
                        source = 'core/AovMat.ll',
                        LEXFLAGS = '-PaovMat_yy')


# C++ source files.
sourceFiles.append(yaccOutput[0]) # 'core/AovMatParser.cc'
sourceFiles += lexOutput          # [ 'core/AovMatLexer.cc' ]
sourceFiles +=[
    'camera/Camera.cc',
    'camera/BakeCamera.cc',
    'camera/DomeMaster3DCamera.cc',
    'camera/OrthographicCamera.cc',
    'camera/PerspectiveCamera.cc',
    'camera/ProjectiveCamera.cc',
    'camera/SphericalCamera.cc',
    'camera/LensDistribution.cc',
    'core/Aov.cc',
    'core/Cryptomatte.cc',
    'core/DebugRay.cc',
    # Remove DebugRay support?, brings in mm and is rarely used
    # 'core/DebugRayExporter.cc',
    'core/DeepBuffer.cc',
    'core/Distribution.cc',
    'core/PbrTLState.cc',
    'core/RayState.cc',
    'core/Scene.cc',
    'core/Statistics.cc',
    'handlers/RayHandlers.cc',
    'handlers/RayHandlerUtils.cc',
    'handlers/ShadeBundleHandler.cc',
    'handlers/XPURayHandlers.cc',
    'integrator/BsdfOneSampler.cc',
    'integrator/BsdfSampler.cc',
    'integrator/LightSetSampler.cc',
    'integrator/PathGuide.cc',
    'integrator/PathIntegrator.cc',
    'integrator/PathIntegratorMultiSampler.cc',
    'integrator/PathIntegratorSubsurface.cc',
    'integrator/PathIntegratorUtil.cc',
    'integrator/PathIntegratorVolume.cc',
    'integrator/Picking.cc',
    'light/CylinderLight.cc',
    'light/DiskLight.cc',
    'light/DistantLight.cc',
    'light/EnvLight.cc',
    'light/Light.cc',
    'light/LightAccelerator.cc',
    'light/LightSet.cc',
    'light/LightTree.cc',
    'light/LightTreeUtil.cc',
    'light/LightUtil.cc',
    'light/MeshLight.cc',
    'light/RectLight.cc',
    'light/SphereLight.cc',
    'light/SpotLight.cc',
    'lightfilter/BarnDoorLightFilter.cc',
    'lightfilter/ColorRampLightFilter.cc',
    'lightfilter/CombineLightFilter.cc',
    'lightfilter/CookieLightFilter.cc',
    'lightfilter/CookieLightFilter_v2.cc',
    'lightfilter/DecayLightFilter.cc',
    'lightfilter/EllipticalFalloff.cc',
    'lightfilter/IntensityLightFilter.cc',
    'lightfilter/RodLightFilter.cc',
    'lightfilter/VdbLightFilter.cc',
    'sampler/Moebius.cc',
    'sampler/PixelScramble.cc',
    'sampler/Sampler.cc',
    'Types.cc',
]

# Expose the current directory as the include path in rendering/pbr/SConscript.
# Putting includePaths = env.Dir('../pbr').abspath because headers aren't
# copied to the build directory, and we need them for ISPC.
includePaths = [
    env.Dir('#moonray'),
    env.Dir('../pbr'),
    env.Dir('..').srcnode(),
    env.Dir('.'),
    env.Dir('../..'),
    env.Dir('#include'),
]

sampleFiles = []

def haveDefine(haystack, needle):
    for item in haystack:
        if isinstance(item, str) and item == needle:
            return True
        if isinstance(item, tuple) and item[0] == needle:
            return True
    return False

def createSampleObjectName(file):
    sampleObjsDir = env.Dir('sampler')

    # Take the sample file, get its file name, and replace its extension with
    # '.o'. Place in the sampleObjsDir.
    samplerObj = sampleObjsDir.File(env.subst(''.join((path.splitext(env.File(file).name)[0],
                                                       '$SHOBJSUFFIX'))))
    samplerObj.attributes.shared = 1
    return samplerObj

def symbolsFromBinFilename(binFile):
    base = '_binary_moonray_rendering_pbr_' + binFile.replace('/','_').replace('.','_').replace('-','_')
    return base+'_start', base+'_end'

sampleObjs = []

# TODO: Expose other sampling options
moonray_sampling = "PMJ02"
sampling_defs = ['LIB_RENDERING_PBR_SAMPLING_USE_' + moonray_sampling + '\n']

if moonray_sampling == "PMJ02":

    bin_pmj02_best_candidate    = 'sampler/pmj02_best_candidate_4096.bin'
    bin_ppd_2D_integrator       = 'sampler/ppd_2D_integrator_points_4096_sequences_of_1024.bin'
    bin_ppd_lens                = 'sampler/ppd_lens_points_961_sequences_of_1024.bin'
    bin_bc_1D_integrator        = 'sampler/bc_1D_integrator_points_4096_sequences_of_1024.bin'
    bin_bc_time                 = 'sampler/bc_time_points_841_sequences_of_1024.bin'

    sampleFiles.append(bin_pmj02_best_candidate)
    sampleFiles.append(bin_ppd_2D_integrator)
    sampleFiles.append(bin_ppd_lens)
    sampleFiles.append(bin_bc_1D_integrator)
    sampleFiles.append(bin_bc_time)

    # pmj02_best_candidate_4096.bin is to large too commit to github so split it into 40M
    # chunks, then cat it together again before objcopying it to a .os file.
    # run "split --bytes=40M --numeric-suffix=1 --suffix-length=1 pmj02_best_candidate_4096.bin pmj02_best_candidate_4096.bin."
    # if a new version is created to split it apart again.
    target = env.Command(target=bin_pmj02_best_candidate,
                         source=[
                             'sampler/pmj02_best_candidate_4096.bin.1',
                             'sampler/pmj02_best_candidate_4096.bin.2',
                             'sampler/pmj02_best_candidate_4096.bin.3',
                             'sampler/pmj02_best_candidate_4096.bin.4',
                         ],
                         action='cat $SOURCES > $TARGET')

    # Find these symbol using the result of the above cat Command, because the
    # .bin file will be generated in the build dir
    symbol_root = '_binary_'+target[0].path.replace('/','_').replace('.','_').replace('-','_')+'_'
    bin_pmj02_best_candidate_start = symbol_root + "start"
    bin_pmj02_best_candidate_end = symbol_root + "end"

    # For these .bin files we can just use the filename to determine these symbols
    bin_ppd_2D_integrator_start, bin_ppd_2D_integrator_end  = symbolsFromBinFilename(bin_ppd_2D_integrator)
    bin_ppd_lens_start, bin_ppd_lens_end                    = symbolsFromBinFilename(bin_ppd_lens)
    bin_bc_1D_integrator_start, bin_bc_1D_integrator_end    = symbolsFromBinFilename(bin_bc_1D_integrator)
    bin_bc_time_start, bin_bc_time_end                      = symbolsFromBinFilename(bin_bc_time)

    sampling_defs.extend([
        'SAMPLES_PMJ02_BEST_CANDIDATE_4096_BIN_START ' + bin_pmj02_best_candidate_start,
        'SAMPLES_PMJ02_BEST_CANDIDATE_4096_BIN_END ' + bin_pmj02_best_candidate_end,
        'SAMPLES_PPD_2D_INTEGRATOR_BIN_START ' + bin_ppd_2D_integrator_start,
        'SAMPLES_PPD_2D_INTEGRATOR_BIN_END ' + bin_ppd_2D_integrator_end,
        'SAMPLES_PPD_LENS_BIN_START ' + bin_ppd_lens_start,
        'SAMPLES_PPD_LENS_BIN_END ' + bin_ppd_lens_end,
        'SAMPLES_BC_1D_INTEGRATOR_BIN_START ' + bin_bc_1D_integrator_start,
        'SAMPLES_BC_1D_INTEGRATOR_BIN_END ' + bin_bc_1D_integrator_end,
        'SAMPLES_BC_TIME_BIN_START ' + bin_bc_time_start,
        'SAMPLES_BC_TIME_BIN_END ' + bin_bc_time_end,
    ])

def get_copyright_year(starting_year):
    current_year = datetime.date.today().year
    if starting_year == current_year:
        return str(starting_year)
    else:
        assert starting_year < current_year
        return str(starting_year) + '-' + str(current_year)

# Create the SamplingDefinitions.h header template
header_subst_dict = {}
header_subst_dict['@copyrightyear@'] = get_copyright_year(2022)
header_template = '''// Copyright @copyrightyear@ DreamWorks Animation LLC
// SPDX-License-Identifier: Apache-2.0

// THIS FILE AUTO-GENERATED BY lib/rendering/pbr/SConscript

#pragma once

'''

for definition in sampling_defs:
    header_template += '#define {}\n'.format(definition)

# Generate the header file from the template substituting in values from the header_subst_dict.
sampling_defs_h = env.Textfile(
target='SamplingDefinitions.h',
source=header_template,
SUBST_DICT=header_subst_dict,
TEXTFILESUFFIX='')

env.Depends(headers, sampling_defs_h)
env.DWAAlias('@install_include', headers)
env.DWAInstallInclude(headers, 'moonray/rendering/pbr/sampler')

# Install the version file into the packages' include directory tree
# env.DWAInstallInclude([sampling_defs_h], 'moonray/rendering/pbr/sampler')

for sampleFile in sampleFiles:
    sampleObj = createSampleObjectName(sampleFile)
    sampleObjs.append(sampleObj)
    objcopy(sampleFile, sampleObj)

()
env.Prepend(CPPPATH=includePaths)
if 'icc' in env['CC']:
    env.AppendUnique(CXXFLAGS=['-wd2557', '-wd2282'])
elif 'gcc' in env['CC']:
    env.AppendUnique(CXXFLAGS=['-std=c++17'])
elif 'clang' in env['CC']:
    env.AppendUnique(CXXFLAGS=['-Wno-register'])
lib = env.DWASharedLibrary(libName, sourceFiles + sampleObjs)
target = env.DWAInstallLib(lib)

# ------------------------------------------------------------------------------
# Set component

env.DWAComponent(
    libName,
    LIBS       = target,
    CPPDEFINES = [('STL_VERSION', stl_version)],
    CPPPATH    = includePaths,
    COMPONENTS = components)

env.DWAInstallSConscriptStub(
    libName,
    LIBS=target,
    CPPDEFINES=[('STL_VERSION', stl_version)],
    CPPPATH=[env.Dir('$INSTALL_DIR/include'), env.Dir('$INSTALL_DIR/include/moonray')],
    COMPONENTS=components)
