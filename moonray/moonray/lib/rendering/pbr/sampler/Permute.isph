// Copyright 2023-2024 DreamWorks Animation LLC
// SPDX-License-Identifier: Apache-2.0


#pragma once

#include "IntegerDivision.isph"

typedef const uniform uint32* uniform cuip_t;

// Set in C++ code.
extern cuip_t kISPC8Permutations;
extern cuip_t kISPCFactorials;
extern cuip_t kISPCFactorialRoundDownPow2;
extern cuip_t kISPCStrides;

// From Pixar's Correlated Multi-Jittered Sampling by Kensler
// Derived from
// Ciphers with Arbitrary Finite Domains by Black and Rogaway
// Method 2: Cycle-Walking Cipher
//
// The bitwise operations used are reversible for any power-of-two domain (i.e. the domain of p). This means that if we
// apply our hash function E(x), we can get the original x back by applying its inverse. So if we cycle-walk from a
// larger domain to a smaller domain by repeated applications of our hash function, we get unique values out (E(x) is
// one-to-one on this cycle), giving us a permutation on the smaller domain.
inline uint32 permute(uint32 i, uint32 l, uint32 p)
{
    assert(i < l);

    uint32 w = l - 1u;
    w |= w >>  1u;
    w |= w >>  2u;
    w |= w >>  4u;
    w |= w >>  8u;
    w |= w >> 16u;
    do {
        i ^= p;             i *= 0xe170893du;
        i ^= p       >> 16u;
        i ^= (i & w) >>  4u;
        i ^= p       >>  8u; i *= 0x0929eb3fu;
        i ^= p       >> 23u;
        i ^= (i & w) >>  1u; i *= 1 | p >> 27u;
                             i *= 0x6935fa69u;
        i ^= (i & w) >> 11u; i *= 0x74dcb303u;
        i ^= (i & w) >>  2u; i *= 0x9e501cc3u;
        i ^= (i & w) >>  2u; i *= 0xc860a3dfu;
        i &= w;
        i ^= i >> 5u;
    } while (i >= l);
    //return (i + p) % l;
    return mod(i + p, l);
}

inline varying uint32 roundDownToMultiple(varying uint32 n, varying uint32 multiple)
{
    return quotient(n, multiple) * multiple;
}

inline varying uint32 roundDownToMultiple(varying uint32 n, uniform uint32 multiple)
{
    return quotient(n, multiple) * multiple;
}

inline uniform uint32 roundDownToMultiple(uniform uint32 n, uniform uint32 multiple)
{
    return (n / multiple) * multiple;
}

inline uint32 getFromArray8(uint32 array, uint32 idx)
{
    return (array >> (idx * 3ul)) & 0x7ul;
}

// Expects nelements in [0, 8]
// Expects an index in [0, nelements)
//
// This function does not return the full space of permutations.
inline varying uint32 permuteIndexFastRelative(varying uint32 seed, varying uint32 index, uniform uint32 nelements)
{
    // We want stride to be co-prime with the active count so that we hit all values as we index through the array.
    // We use a Mersenne prime because, in some cases, a compiler can optimize operations.
    const uniform uint32 stride = (1u << 13u) - 1u;
    seed *= stride;
    const varying uint32 indexHash = seed & (kISPCFactorialRoundDownPow2[nelements] - 1);
    const varying uint32 perm = getFromArray8(kISPC8Permutations[indexHash], index);
    return perm;
}

// Expects nelements in [0, 8]
// Expects an index in [0, nelements)
//
// This function does not return the full space of permutations.
inline varying uint32 permuteIndexFastRelative(varying uint32 seed, varying uint32 index, varying uint32 nelements)
{
    // We want stride to be co-prime with the active count so that we hit all values as we index through the array.
    // We use a Mersenne prime because, in some cases, a compiler can optimize operations.
    const uniform uint32 stride = (1u << 13u) - 1u;
    seed *= stride;
    const varying uint32 indexHash = seed & (kISPCFactorialRoundDownPow2[nelements] - 1);
    const varying uint32 perm = getFromArray8(kISPC8Permutations[indexHash], index);
    return perm;
}

// Expects nelements in [0, 8]
// Expects an absoluteIndex in [0, inf)
// This will return permuted indices in [0, nelements) grouped by nelements
//
// For every nelements, we want a different permutation.
// E.g. if nelements == 4
//
// If absoluteIndex increases beyond nelements as such (in hex):
// 0 1 2 3   4 5 6 7   8 9 a b
//
// Maps to
// 0 1 2 3 | 0 1 2 3 | 0 1 2 3
// which may become
// 2 0 1 3 | 0 2 3 1 | 3 2 0 1
//
// This function does not return the full space of permutations.
inline varying uint32 permuteIndexFastAbsolute(varying uint32 seed, varying uint32 absoluteIndex, uniform uint32 nelements)
{
    const varying div_t d = div(absoluteIndex, nelements);
    const varying uint32& permutationIndex = d.quot;
    const varying uint32& index            = d.rem;
    seed += permutationIndex;
    return permuteIndexFastRelative(seed, index, nelements);
}

// Expects nelements in [0, 8]
// Expects an absoluteIndex in [0, inf)
// This will return permuted indices in [0, nelements) grouped by nelements
//
// For every nelements, we want a different permutation.
// E.g. if nelements == 4
//
// If absoluteIndex increases beyond nelements as such (in hex):
// 0 1 2 3   4 5 6 7   8 9 a b
//
// Maps to
// 0 1 2 3 | 0 1 2 3 | 0 1 2 3
// which may become
// 2 0 1 3 | 0 2 3 1 | 3 2 0 1
//
// This function does not return the full space of permutations.
inline varying uint32 permuteIndexFastAbsolute(varying uint32 seed, varying uint32 absoluteIndex, varying uint32 nelements)
{
    // We want stride to be co-prime with the active count so that we hit all values as we index through the array.
    // We use a Mersenne prime because, in some cases, a compiler can optimize operations.
    const varying div_t d = div(absoluteIndex, nelements);
    const varying uint32& permutationIndex = d.quot;
    const varying uint32& index            = d.rem;
    seed += permutationIndex;
    return permuteIndexFastRelative(seed, index, nelements);
}

// Expects nelements in [0, 8]
// Expects an index in [0, nelements)
inline varying uint32 permuteIndexRelative(varying uint32 seed, varying uint32 index, uniform uint32 nelements)
{
    assert(index < 8);
    assert(nelements <= 8);
    seed *= kISPCStrides[nelements];
    const varying uint32 indexHash = mod(seed, kISPCFactorials[nelements]);
    const varying uint32 perm = getFromArray8(kISPC8Permutations[indexHash], index);
    return perm;
}

// Expects nelements in [0, 8]
// Expects an index in [0, nelements)
inline varying uint32 permuteIndexRelative(varying uint32 seed, varying uint32 index, varying uint32 nelements)
{
    assert(index < 8);
    assert(nelements <= 8);
    seed *= kISPCStrides[nelements];
    const varying uint32 indexHash = mod(seed, kISPCFactorials[nelements]);
    const varying uint32 perm = getFromArray8(kISPC8Permutations[indexHash], index);
    return perm;
}

// Expects nelements in [0, 8]
// Expects an absoluteIndex in [0, inf)
// This will return permuted indices in [0, nelements) grouped by nelements
//
// For every nelements, we want a different permutation.
// E.g. if nelements == 4
//
// If absoluteIndex increases beyond nelements as such (in hex):
// 0 1 2 3   4 5 6 7   8 9 a b
//
// Maps to
// 0 1 2 3 | 0 1 2 3 | 0 1 2 3
// which may become
// 2 0 1 3 | 0 2 3 1 | 3 2 0 1
inline varying uint32 permuteIndexAbsolute(varying uint32 seed, varying uint32 absoluteIndex, uniform uint32 nelements)
{
    const varying div_t d = div(absoluteIndex, nelements);
    const varying uint32& permutationIndex = d.quot;
    const varying uint32& index            = d.rem;
    seed += permutationIndex; // Set a new seed for each permutation index (groups of nelements)
    return permuteIndexRelative(seed, index, nelements);
}

// Expects nelements in [0, 8]
// Expects an absoluteIndex in [0, inf)
// This will return permuted indices in [0, nelements) grouped by nelements
//
// For every nelements, we want a different permutation.
// E.g. if nelements == 4
//
// If absoluteIndex increases beyond nelements as such (in hex):
// 0 1 2 3   4 5 6 7   8 9 a b
//
// Maps to
// 0 1 2 3 | 0 1 2 3 | 0 1 2 3
// which may become
// 2 0 1 3 | 0 2 3 1 | 3 2 0 1
inline varying uint32 permuteIndexAbsolute(varying uint32 seed, varying uint32 absoluteIndex, varying uint32 nelements)
{
    const varying div_t d = div(absoluteIndex, nelements);
    const varying uint32& permutationIndex = d.quot;
    const varying uint32& index            = d.rem;
    seed += permutationIndex; // Set a new seed for each permutation index (groups of nelements)
    return permuteIndexRelative(seed, index, nelements);
}

inline varying uint32 permuteIndexJIT(varying uint32 seed, varying uint32 absoluteIndex, varying uint32 nelements)
{
    const varying div_t d = div(absoluteIndex, nelements);
    const varying uint32& permutationIndex = d.quot;
    const varying uint32& index            = d.rem;

    seed *= permutationIndex + 1u; // For every n elements, we want a different permutation.
                                   // E.g. if nelements == 4
                                   // 0 1 2 3 | 0 1 2 3 | 0 1 2 3
                                   // may become
                                   // 2 0 1 3 | 0 2 3 1 | 3 2 0 1
                                   // as absolute index increases beyond nelements
    return permute(index, nelements, seed);
}

inline varying uint32 permuteSequence(varying uint32 seed, varying uint32 absoluteIndex, uniform uint32 nelements)
{
    const uniform uint32 permutationSize = 8u;
    const uniform uint32 largestMultiple = roundDownToMultiple(nelements, permutationSize);

    uniform uint32 nPermutationElements;
    if (absoluteIndex >= largestMultiple) {
        // Take care of tail end of sequence, where we may not be a multiple of our permutation size.
        nPermutationElements = nelements - largestMultiple;
    } else {
        nPermutationElements = permutationSize;
    }
    const varying uint32 rd = roundDownToMultiple(absoluteIndex, permutationSize);

    // Just like in permuteIndexAbsolute, we want the seed to vary for every 8 elements.
    // We subtract our rounded-down index to get the indices in the range expected by permuteIndexRelative
    const varying uint32 index = permuteIndexRelative(seed + rd, absoluteIndex - rd, nPermutationElements);
    //print("absidx = % largestMultiple = % nPerm = % idx = %\n", absoluteIndex, largestMultiple, nPermutationElements, index);
    return rd + index;
}

inline varying uint32 permuteSequence(varying uint32 seed, varying uint32 absoluteIndex, varying uint32 nelements)
{
    const uniform uint32 permutationSize = 8u;
    const varying uint32 largestMultiple = roundDownToMultiple(nelements, permutationSize);

    varying uint32 nPermutationElements;
    if (absoluteIndex >= largestMultiple) {
        // Take care of tail end of sequence, where we may not be a multiple of our permutation size.
        nPermutationElements = nelements - largestMultiple;
    } else {
        nPermutationElements = permutationSize;
    }
    const varying uint32 rd = roundDownToMultiple(absoluteIndex, permutationSize);

    // Just like in permuteIndexAbsolute, we want the seed to vary for every 8 elements.
    // We subtract our rounded-down index to get the indices in the range expected by permuteIndexRelative
    const varying uint32 index = permuteIndexRelative(seed + rd, absoluteIndex - rd, nPermutationElements);
    return rd + index;
}

inline varying uint32 permuteSequenceFast(varying uint32 seed, varying uint32 absoluteIndex, uniform uint32 nelements)
{
    const uniform uint32 permutationSize = 8u;
    const uniform uint32 largestMultiple = roundDownToMultiple(nelements, permutationSize);

    uniform uint32 nPermutationElements;
    if (absoluteIndex >= largestMultiple) {
        // Take care of tail end of sequence, where we may not be a multiple of our permutation size.
        nPermutationElements = nelements - largestMultiple;
    } else {
        nPermutationElements = permutationSize;
    }
    const varying uint32 rd = roundDownToMultiple(absoluteIndex, permutationSize);

    // Just like in permuteIndexAbsolute, we want the seed to vary for every 8 elements.
    // We subtract our rounded-down index to get the indices in the range expected by permuteIndexRelative
    const varying uint32 index = permuteIndexFastRelative(seed + rd, absoluteIndex - rd, nPermutationElements);
    //print("absidx = % largestMultiple = % nPerm = % idx = %\n", absoluteIndex, largestMultiple, nPermutationElements, index);
    return rd + index;
}

inline varying uint32 permuteSequenceFast(varying uint32 seed, varying uint32 absoluteIndex, varying uint32 nelements)
{
    const uniform uint32 permutationSize = 8u;
    const varying uint32 largestMultiple = roundDownToMultiple(nelements, permutationSize);

    varying uint32 nPermutationElements;
    if (absoluteIndex >= largestMultiple) {
        // Take care of tail end of sequence, where we may not be a multiple of our permutation size.
        nPermutationElements = nelements - largestMultiple;
    } else {
        nPermutationElements = permutationSize;
    }
    const varying uint32 rd = roundDownToMultiple(absoluteIndex, permutationSize);

    // Just like in permuteIndexAbsolute, we want the seed to vary for every 8 elements.
    // We subtract our rounded-down index to get the indices in the range expected by permuteIndexRelative
    const varying uint32 index = permuteIndexFastRelative(seed + rd, absoluteIndex - rd, nPermutationElements);
    return rd + index;
}

