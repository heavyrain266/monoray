// Copyright 2023-2024 DreamWorks Animation LLC
// SPDX-License-Identifier: Apache-2.0

/// @file HairBsdf.isph
#pragma once

#include <moonray/rendering/shading/ispc/BsdfComponent.isph>
#include "HairState.isph"
#include <moonray/rendering/shading/ispc/bsdf/Bsdf.isph>
#include <moonray/rendering/shading/ispc/bsdf/BsdfSlice.isph>

#include <moonray/rendering/shading/ispc/Util.isph>

// Uncomment this to use uniform sampling
/* #define PBR_HAIR_USE_UNIFORM_SAMPLING 1 */

// Derive a directional differential size that varies according to width
// Experimentally, we found that we want around 0.075 when width is
// 0 degrees and 0.25 when it is 15 degrees. Also taking care that
// mLongitudinalWidth is expressed in radians, not degrees...
// 15.0f/180.f = 0.0833f
static const float HairBsdfLobe_sdDFactorMin = 0.075f;
static const float HairBsdfLobe_sdDFactorMax = 0.25f;
static const float HairBsdfLobe_sdDFactorSlope =
    (HairBsdfLobe_sdDFactorMax - HairBsdfLobe_sdDFactorMin) / (0.0833f * sPi);

#define BSDF_HAIR_LOBE_BASE                                 \
    BSDF_LOBE_BASE;                                         \
    varying Vec3f mHairDir;                                 \
    varying float mH;                                       \
    varying float mMediumIOR;                               \
    varying float mIOR;                                     \
    varying HairFresnelType mFresnelType;                   \
    varying float mCuticleLayerThickness;                   \
    varying float mdDFactor;                                \
    varying Color mHairColor;                               \
    varying Color mTint;                                    \
    varying float mSaturation;                              \
    varying Color mSigmaA;                                  \
    varying Vec2f mHairUV;                                  \
    varying float mHairRotation;                            \
    varying Vec3f mHairNormal

#define BSDF_HAIR_LOBE_GLINT                                \
    varying bool mShowGlint;                                \
    varying float mGlintRoughness;                          \
    varying float mGlintEccentricity;                       \
    varying float mGlintSaturation

struct HairBsdfLobeGlintAttrs
{
    BSDF_HAIR_LOBE_GLINT;
};

struct HairBsdfLobe
{
    BSDF_HAIR_LOBE_BASE;
    varying float mSinAlpha;
    varying float mCosAlpha;
    varying float mLongitudinalShift;
    varying float mLongitudinalRoughness;
    varying float mLongitudinalVariance;
    varying float mAzimuthalRoughness;
    varying float mAzimuthalVariance;
    BSDF_HAIR_LOBE_GLINT;
    uniform intptr_t mEvalBsdfFn;
    uniform intptr_t mEvalFresnelFn;
    uniform intptr_t mEvalAbsorptionFn;
    uniform intptr_t mEvalMTermFn;
    uniform intptr_t mEvalNTermWithAbsorptionFn;
    uniform intptr_t mEvalPhiPdfFn;
    uniform intptr_t mEvalThetaPdfFn;
    uniform intptr_t mSamplePhiFn;
    uniform intptr_t mSampleThetaFn;
};

// Function pointer types
typedef varying Color (* uniform HairBsdfLobeEvalFresnelFn)(const varying HairBsdfLobe * uniform lobe,
                                                            const varying HairState& hairState);

typedef varying Color (* uniform HairBsdfLobeEvalAbsorptionFn)(const varying HairState& hairState,
                                                               const varying Color& scale,
                                                               const varying float saturation = 1.0f);

typedef varying float (* uniform HairBsdfLobeEvalMTermFn)(const varying HairState& hairState,
                                                          const varying float sinAlpha,
                                                          const varying float cosAlpha,
                                                          const varying float variance);

typedef varying Color (* uniform HairBsdfLobeEvalNTermWithAbsorptionFn)(const varying HairBsdfLobe * uniform lobe,
                                                                        const varying HairState& hairState,
                                                                        const varying Color& scale,
                                                                        const varying HairBsdfLobeGlintAttrs * uniform glintAttrs = NULL,
                                                                        const varying float variance = 0.0f,
                                                                        const varying float saturation = 1.0f);

typedef varying float (* uniform HairBsdfLobeEvalPhiPdfFn)(const varying HairBsdfLobe * uniform lobe,
                                                           const varying HairState& hairState,
                                                           const varying float variance = 0.0f);

typedef varying float (* uniform HairBsdfLobeEvalThetaPdfFn)(const varying HairState& hairState,
                                                             const varying float sinAlpha,
                                                             const varying float cosAlpha,
                                                             const varying float variance);

typedef varying float (* uniform HairBsdfLobeSamplePhiFn)(const varying float variance,
                                                          const varying float r2,
                                                          const varying float phiO,
                                                          varying float &phiI);

typedef varying float (* uniform HairBsdfLobeSampleThetaFn)(const varying float sinAlpha,
                                                            const varying float cosAlpha,
                                                            const varying float variance,
                                                            const varying float r1,
                                                            const varying float thetaO,
                                                            varying float &thetaI);

typedef varying float (* uniform HairBsdfLobeEvalCosineTermFn)(const varying HairBsdfLobe * uniform lobe,
                                                               const varying HairState& hairState);

varying Color
HairBsdfLobe_eval(const varying BsdfLobe * uniform lobe,
                  const varying BsdfSlice &slice,
                  const varying Vec3f &wi,
                  varying float * uniform pdf);

varying Color
HairBsdfLobe_sample(const varying BsdfLobe * uniform lobe,
                    const varying BsdfSlice &slice,
                    varying float r1,
                    varying float r2,
                    varying Vec3f &wi,
                    varying float &pdf);

// Utility Func to evalHairFresnel Types
varying Color
HairBsdfLobe_evalHairFresnel(const varying HairBsdfLobe * uniform lobe,
                             const varying HairState& hairState,
                             const varying float cosTheta);

inline varying Color
HairBsdfLobe_evalFresnel(const varying HairBsdfLobe * uniform hairLobe,
                         const varying HairState& hairState)
{
    HairBsdfLobeEvalFresnelFn fn = (HairBsdfLobeEvalFresnelFn) hairLobe->mEvalFresnelFn;
    return fn(hairLobe, hairState);
}

inline varying Color
HairBsdfLobe_evalAbsorption(const varying HairBsdfLobe * uniform hairLobe,
                            const varying HairState& hairState)
{
    HairBsdfLobeEvalAbsorptionFn fn = (HairBsdfLobeEvalAbsorptionFn) hairLobe->mEvalAbsorptionFn;
    return fn(hairState,
              hairLobe->mScale,
              hairLobe->mSaturation);
}

inline varying float
HairBsdfLobe_evalMTerm(const varying HairBsdfLobe * uniform hairLobe,
                       const varying HairState& hairState)
{
    HairBsdfLobeEvalMTermFn fn = (HairBsdfLobeEvalMTermFn) hairLobe->mEvalMTermFn;
    return fn(hairState,
              hairLobe->mSinAlpha,
              hairLobe->mCosAlpha,
              hairLobe->mLongitudinalVariance);
}

inline varying Color
HairBsdfLobe_evalNTermWithAbsorption(const varying HairBsdfLobe * uniform hairLobe,
                                     const varying HairState& hairState,
                                     const varying HairBsdfLobeGlintAttrs * uniform glintAttrs)
{
    HairBsdfLobeEvalNTermWithAbsorptionFn fn = (HairBsdfLobeEvalNTermWithAbsorptionFn) hairLobe->mEvalNTermWithAbsorptionFn;
    return fn(hairLobe,
              hairState,
              hairLobe->mScale,
              glintAttrs,
              hairLobe->mAzimuthalVariance,
              hairLobe->mSaturation);
}

inline varying float
HairBsdfLobe_evalPhiPdf(const varying HairBsdfLobe * uniform hairLobe,
                        const varying HairState& hairState)
{
    HairBsdfLobeEvalPhiPdfFn fn = (HairBsdfLobeEvalPhiPdfFn) hairLobe->mEvalPhiPdfFn;
    return fn(hairLobe,
              hairState,
              hairLobe->mAzimuthalVariance);
}

inline varying float
HairBsdfLobe_evalThetaPdf(const varying HairBsdfLobe * uniform hairLobe,
                          const varying HairState& hairState)
{
    HairBsdfLobeEvalThetaPdfFn fn = (HairBsdfLobeEvalThetaPdfFn) hairLobe->mEvalThetaPdfFn;
    return fn(hairState,
              hairLobe->mSinAlpha,
              hairLobe->mCosAlpha,
              hairLobe->mLongitudinalVariance);
}

inline varying float
HairBsdfLobe_samplePhi(const varying HairBsdfLobe * uniform hairLobe,
                       varying float r2,
                       varying float phiO,
                       varying float &phiI)
{
    HairBsdfLobeSamplePhiFn fn = (HairBsdfLobeSamplePhiFn) hairLobe->mSamplePhiFn;
    return fn(hairLobe->mAzimuthalVariance,
              r2,
              phiO,
              phiI);
}

inline varying float
HairBsdfLobe_sampleTheta(const varying HairBsdfLobe * uniform hairLobe,
                         varying float r1,
                         varying float thetaO,
                         varying float &thetaI)
{
    HairBsdfLobeSampleThetaFn fn = (HairBsdfLobeSampleThetaFn) hairLobe->mSampleThetaFn;
    return fn(hairLobe->mSinAlpha,
              hairLobe->mCosAlpha,
              hairLobe->mLongitudinalVariance,
              r1,
              thetaO,
              thetaI);
}

inline varying float
HairBsdfLobe_evalCosineTerm(const varying HairBsdfLobe * uniform lobe,
                            const varying HairState& hairState)
{
    return 1.0f;
}

inline varying float
HairBsdfLobe_evalPdf(const varying HairBsdfLobe * uniform lobe,
                     const varying HairState& hairState)
{
#ifdef PBR_HAIR_USE_UNIFORM_SAMPLING

    return  1.0f / sFourPi;

#else

    // This much is the same for all lobes --
    // we need to have a parent Bsdf object, and we generally
    // return zero probability when the light direction is pretty
    // just about parallel to the hair direction.

    float phiPdf = HairBsdfLobe_evalPhiPdf(lobe, hairState);
    float thetaPdf = HairBsdfLobe_evalThetaPdf(lobe, hairState);

    float pdf = max(0.0f, phiPdf * thetaPdf);
    return pdf;
#endif
}

varying float HairBsdfLobe_computeCosineTerm(varying HairState * uniform hair,
                                             const varying HairState& hairState,
                                             const varying bool includeCosineTerm);

inline varying Color
HairBsdfLobe_albedo(const varying BsdfLobe * uniform lobe,
                    const varying BsdfSlice &)
{
    return lobe->mScale;
}

inline uniform bool
HairBsdfLobe_getProperty(const varying BsdfLobe * uniform hairLobe,
                         uniform BsdfLobeProperty property,
                         varying float * uniform dest)
{
    const varying HairBsdfLobe * uniform lobe =
            (const varying HairBsdfLobe * uniform) hairLobe;

    uniform bool handled = true;

    switch (property)
    {
    case BSDF_LOBE_PROPERTY_COLOR:
        *dest       = lobe->mHairColor.r;
        *(dest + 1) = lobe->mHairColor.g;
        *(dest + 2) = lobe->mHairColor.b;
        break;
    case BSDF_LOBE_PROPERTY_ROUGHNESS:
        *dest       = lobe->mLongitudinalRoughness;
        *(dest + 1) = lobe->mLongitudinalRoughness;
        break;
    case BSDF_LOBE_PROPERTY_NORMAL:
        *dest       = lobe->mHairDir.x;
        *(dest + 1) = lobe->mHairDir.y;
        *(dest + 2) = lobe->mHairDir.z;
        break;
    case BSDF_LOBE_PROPERTY_PBR_VALIDITY:
        {
            // Forward call to fresnel
            varying Color res = sBlack;
            if (isActive(lobe->mFresnel)) {
                res = Fresnel_computePbrValidity(lobe->mFresnel);
            }
            *dest       = res.r;
            *(dest + 1) = res.g;
            *(dest + 2) = res.b;
        }
        break;
    default:
        handled = false;
        break;
    }
    return handled;
}



// The paper suggests using a threshold of 1e-5. We use math::sEpsilon (1e-6)
inline varying bool
HairBsdfLobe_clampTest(const varying Vec3f& hairDir,
                       const varying Vec3f& wi)
{
    const float threshold = 1.0f - sEpsilon;
    if (abs(dot(wi, hairDir)) < threshold) {
        return true;
    }
    return false;
}

inline varying bool
HairBsdfLobe_clampTest(const varying float cosThetaWi)
{
    const float threshold = 1.0f - sEpsilon;
    if (abs(cosThetaWi) < threshold) {
        return true;
    }
    return false;
}


/// Same as computeReflectionDirectionDifferential(), but ignoring the effect
/// of surface curvature
inline void
HairBsdfLobe_computeReflectionDirectionDifferentialNoCurvature(
        const varying Vec3f &wo,
        const varying Vec3f &wi,
        const varying Vec3f &H,
        varying Vec3f &dDdx,
        varying Vec3f &dDdy)
{
    dDdx = dDdx - 2.0f * (dot(dDdx, H) * H);
    dDdy = dDdx - 2.0f * (dot(dDdy, H) * H);
}

inline void
HairBsdfLobe_differentials(const varying BsdfLobe * uniform hairLobe,
                           const varying Vec3f &wo,
                           const varying Vec3f &wi,
                           varying float r1,
                           varying float r2,
                           const varying Vec3f &dNdx,
                           const varying Vec3f &dNdy,
                           varying Vec3f &dDdx,
                           varying Vec3f &dDdy)
{
    const varying HairBsdfLobe * uniform lobe =
            (const varying HairBsdfLobe * uniform) hairLobe;

    Vec3f H;
    if (!computeNormalizedHalfVector(wo, wi, H)) {
//        H = hariState.mHairNorm;
    }
    HairBsdfLobe_computeReflectionDirectionDifferentialNoCurvature(wo, wi, H, dDdx, dDdy);
    dDdx = normalize(dDdx) * lobe->mdDFactor;
    dDdy = normalize(dDdy) * lobe->mdDFactor;
}

void
HairBsdfLobe_init(varying HairBsdfLobe * uniform lobe,
                  uniform BsdfLobeName name,
                  uniform BsdfLobeType type,
                  const varying Vec3f& hairDir,
                  const varying Vec2f& hairUV,
                  const varying float mediumIOR,
                  const varying float ior,
                  const varying HairFresnelType fresnelType,
                  const varying float cuticleLayers,
                  const varying float longShift,
                  const varying float longRoughness,
                  const varying float azimRoughness,
                  const varying Color& hairColor,
                  const varying Color& hairSigmaA,
                  const varying Color& hairTint,
                  const varying float hairRotation,
                  const varying Vec3f& hairNormal,
                  const varying float hairSaturation,
                  HairBsdfLobeEvalFresnelFn evalFresnelFn,
                  HairBsdfLobeEvalAbsorptionFn evalAbsorptionFn,
                  HairBsdfLobeEvalMTermFn evalMTermFn,
                  HairBsdfLobeEvalNTermWithAbsorptionFn evalNTermWithAbsorptionFn,
                  HairBsdfLobeEvalPhiPdfFn evalPhiPdfFn,
                  HairBsdfLobeEvalThetaPdfFn evalThetaPdfFn,
                  HairBsdfLobeSamplePhiFn samplePhiFn,
                  HairBsdfLobeSampleThetaFn sampleThetaFn,
                  uniform BsdfLobeGetPropertyFn getPropertyFn,
                  uniform BsdfLobeShowFn showFn);

